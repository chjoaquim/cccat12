// Code generated by mockery v2.31.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/chjoaquim/ride-service/internal/passengers/domain"
	mock "github.com/stretchr/testify/mock"
)

// PassengerRepository is an autogenerated mock type for the PassengerRepository type
type PassengerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: passenger
func (_m *PassengerRepository) Create(passenger *domain.Passenger) (*domain.Passenger, error) {
	ret := _m.Called(passenger)

	var r0 *domain.Passenger
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Passenger) (*domain.Passenger, error)); ok {
		return rf(passenger)
	}
	if rf, ok := ret.Get(0).(func(*domain.Passenger) *domain.Passenger); ok {
		r0 = rf(passenger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Passenger)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Passenger) error); ok {
		r1 = rf(passenger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PassengerRepository) Get(id string) (*domain.Passenger, error) {
	ret := _m.Called(id)

	var r0 *domain.Passenger
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Passenger, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Passenger); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Passenger)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPassengerRepository creates a new instance of PassengerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPassengerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PassengerRepository {
	mock := &PassengerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
